import os
import json
import logging
import aiohttp
from datetime import datetime

from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ["TOKEN"]  # –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

async def get_cbr_rates():
    """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CBR_API_URL, timeout=10) as response:
                response.raise_for_status()
                text = await response.text()
                return json.loads(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üè¶ –ë–æ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/rates - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã\n"
        "/fullrates - –≤—Å–µ –≤–∞–ª—é—Ç—ã\n"
        "/convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞>\n"
        "/convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞1> to <–≤–∞–ª—é—Ç–∞2>"
    )

async def rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    data = await get_cbr_rates()
    if not data:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    popular = ['USD', 'EUR', 'GBP', 'CNY', 'JPY', 'TRY', 'KZT']
    message = f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã ({data['Date']})\n\n"

    for code in popular:
        if code in data['Valute']:
            curr = data['Valute'][code]
            message += f"{curr['CharCode']}: {curr['Value']:.2f} ‚ÇΩ (–∑–∞ {curr['Nominal']} {curr['Name']})\n"

    await update.message.reply_text(message)

async def fullrates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã"""
    data = await get_cbr_rates()
    if not data:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    message = f"üìã –í—Å–µ –≤–∞–ª—é—Ç—ã –¶–ë –†–§ ({data['Date']})\n\n"
    sorted_currencies = sorted(data['Valute'].items(), key=lambda x: x[1]['CharCode'])

    for code, currency in sorted_currencies:
        message += (
            f"{currency['CharCode']} ({currency['Name']}):\n"
            f"  {currency['Nominal']} {code} = {currency['Value']:.2f} ‚ÇΩ\n"
            f"  üîÑ {currency['Previous']:.2f} ‚ÇΩ (–ø—Ä–µ–¥.)\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    for i in range(0, len(message), 4096):
        await update.message.reply_text(message[i:i + 4096])

async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"""
    await update.message.reply_text("üõ† –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

async def set_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("rates", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        BotCommand("fullrates", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã"),
        BotCommand("convert", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã"),
    ]
    await application.bot.set_my_commands(commands)

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rates", rates))
    application.add_handler(CommandHandler("fullrates", fullrates))
    application.add_handler(CommandHandler("convert", convert))

    application.post_init(set_commands)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
